/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visuallizer;

import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * MainForm is the GUI of the program The user opens the param file they wish to
 * run, select a number of runs, then run it. After the runs complete the other
 * buttons enable allowing the user to see total run charts and averages of the
 * three types of data (median, best run, and best of gen)
 *
 * @author Eric
 * @author Jeff
 */
public class MainForm extends javax.swing.JFrame {

    public boolean threadRunning;       // Checking to see when the out2.stat file starts a new file
    public Thread runThread;            // thread consistently checking the out2.stat file
    public boolean paramsSelected;      // User selected a file yet?
    public String directory;            // Directory of the file they chose
    public String paramsDirectory;      // params directory
    public String executeDirectory;     // execute directory
    public String ecjDirectory;         // ecj directory
    public String fileName;             // file name of the params file minus the .params
    public OutputReader or;             // Output reader
    public GraphCreator gc;             // graph creator
    public Process p;                   // Process to run ECJ commands
    public boolean stopped;             // If the user tries to stop the runs

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        paramsSelected = false;
        stopped = false;
        or = new OutputReader();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTF = new javax.swing.JTextArea();
        optionsPanel = new javax.swing.JPanel();
        runsLabel = new javax.swing.JLabel();
        runsValue = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        medianCreate = new javax.swing.JButton();
        bestRunCreate = new javax.swing.JButton();
        bestGenCreate = new javax.swing.JButton();
        interruptButton = new javax.swing.JButton();
        bucketMedianCreate = new javax.swing.JButton();
        bucketBestRunCreate = new javax.swing.JButton();
        bucketBestGenCreate = new javax.swing.JButton();
        liveUpdate = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        quit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(0, 102, 0));
        statusLabel.setText("Status");

        statusTF.setEditable(false);
        statusTF.setBackground(new java.awt.Color(0, 0, 0));
        statusTF.setColumns(20);
        statusTF.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
        statusTF.setForeground(new java.awt.Color(255, 255, 255));
        statusTF.setLineWrap(true);
        statusTF.setRows(5);
        jScrollPane1.setViewportView(statusTF);

        runsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        runsLabel.setForeground(new java.awt.Color(0, 102, 0));
        runsLabel.setText("Number of Runs");

        runsValue.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        runsValue.setForeground(new java.awt.Color(0, 102, 0));
        runsValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        runsValue.setText("1");

        runButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        runButton.setForeground(new java.awt.Color(51, 255, 0));
        runButton.setText("Run!");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        medianCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        medianCreate.setForeground(new java.awt.Color(0, 204, 204));
        medianCreate.setText("Create Median Charts");
        medianCreate.setEnabled(false);
        medianCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianCreateActionPerformed(evt);
            }
        });

        bestRunCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bestRunCreate.setForeground(new java.awt.Color(0, 204, 204));
        bestRunCreate.setText("Create Best Run Charts");
        bestRunCreate.setEnabled(false);
        bestRunCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestRunCreateActionPerformed(evt);
            }
        });

        bestGenCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bestGenCreate.setForeground(new java.awt.Color(0, 204, 204));
        bestGenCreate.setText("Create Best Gen Charts");
        bestGenCreate.setEnabled(false);
        bestGenCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestGenCreateActionPerformed(evt);
            }
        });

        interruptButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        interruptButton.setForeground(new java.awt.Color(204, 0, 0));
        interruptButton.setText("Stop Runs!");
        interruptButton.setEnabled(false);
        interruptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interruptButtonActionPerformed(evt);
            }
        });

        bucketMedianCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bucketMedianCreate.setForeground(new java.awt.Color(0, 204, 204));
        bucketMedianCreate.setText("Bucket Median Chart");
        bucketMedianCreate.setEnabled(false);
        bucketMedianCreate.setPreferredSize(new java.awt.Dimension(195, 25));
        bucketMedianCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bucketMedianCreateActionPerformed(evt);
            }
        });

        bucketBestRunCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bucketBestRunCreate.setForeground(new java.awt.Color(0, 204, 204));
        bucketBestRunCreate.setText("Bucket Best Run Chart");
        bucketBestRunCreate.setEnabled(false);
        bucketBestRunCreate.setPreferredSize(new java.awt.Dimension(195, 25));
        bucketBestRunCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bucketBestRunCreateActionPerformed(evt);
            }
        });

        bucketBestGenCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bucketBestGenCreate.setForeground(new java.awt.Color(0, 204, 204));
        bucketBestGenCreate.setText("Bucket Best Gen Chart");
        bucketBestGenCreate.setEnabled(false);
        bucketBestGenCreate.setPreferredSize(new java.awt.Dimension(195, 25));
        bucketBestGenCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bucketBestGenCreateActionPerformed(evt);
            }
        });

        liveUpdate.setText("Live Updating (Can cause errors)");

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bucketBestGenCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(bucketMedianCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bestGenCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(runButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(interruptButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(medianCreate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bestRunCreate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                            .addComponent(runsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(runsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(bucketBestRunCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(liveUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liveUpdate)
                .addGap(9, 9, 9)
                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interruptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(medianCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bestRunCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bestGenCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bucketMedianCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bucketBestRunCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bucketBestGenCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bestGenCreate, bestRunCreate, medianCreate});

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 0));
        jLabel2.setText("4v82 Project");

        fileMenu.setText("File");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        fileMenu.add(open);

        quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        fileMenu.add(quit);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Open button
     *
     * @param evt mouse click on open
     */
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

        statusTF.append("Status: Attempting to open a .params file.\n");

        //**************
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Please open a .params file");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".params", "params");
        fileChooser.addChoosableFileFilter(filter);
        //fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            paramsDirectory = fileChooser.getSelectedFile().toString();
            directory = fileChooser.getCurrentDirectory().toString();

            // Create the execute directory, everything after /garbage/ecj/---
            // we want everything after ---
            try {
                executeDirectory = paramsDirectory.substring(paramsDirectory.lastIndexOf("ec\\"), paramsDirectory.length());
                ecjDirectory = directory.substring(0, directory.lastIndexOf("\\ec\\"));
                fileName = fileChooser.getSelectedFile().getName();
                fileName = fileName.substring(0, fileName.lastIndexOf(".params"));
                paramsSelected = true;
                checkParams(fileChooser.getSelectedFile());
            } catch (Exception e) {
                statusTF.append("\nIncorrect directory chosen. Please ensure that your params file is within the ECJ subdirectory.\n");
            }

        } else {
            statusTF.append("Status: Open cancelled by user.\n");
            //System.out.println("File access cancelled by user.");
        }

    }//GEN-LAST:event_openActionPerformed

    /**
     * Check the params file for specific settings needed for this to work
     *
     * @param paramFile
     */
    public void checkParams(File paramFile) {
        boolean found = false;
        try {
            Scanner s = new Scanner(paramFile);
            while (s.hasNextLine()) {
                // Try to find this specific line, this is specific to this program as its a comment
                if (s.nextLine().equals("#GRAPHOUTPUTSDONOTCHANGE")) {
                    //System.out.println("Found params!");
                    found = true;
                }
            }

            // If we didnt find the specific line (above) we must add 4 lines
            if (!found) {

                // Pop up                
                JOptionPane.showMessageDialog(new JPanel(), "Added specific commands to the param file");
                PrintStream out = new PrintStream(new FileOutputStream(paramsDirectory, true));
                out.println("#GRAPHOUTPUTSDONOTCHANGE");
                out.println("stat.num-children = 1");
                out.println("stat.child.0 = ec.simple.SimpleShortStatistics");
                out.println("stat.child.0.file = $out2.stat");
                out.close();
            }

            s.close();
            // Enable the buttons
            runButton.setEnabled(true);
            interruptButton.setEnabled(false);
            medianCreate.setEnabled(false);
            bestRunCreate.setEnabled(false);
            bestGenCreate.setEnabled(false);
            bucketMedianCreate.setEnabled(false);
            bucketBestRunCreate.setEnabled(false);
            bucketBestGenCreate.setEnabled(false);
            statusTF.setText(""); // clear the status field when loading a new file
            statusTF.append("Loaded " + paramFile.getAbsolutePath() + "\n");

        } catch (FileNotFoundException | HeadlessException e) {
            statusTF.append("Error reading params file\n");
            //System.out.println("Error loading params");
        }
    }

    /**
     * Quit
     *
     * @param evt quit button clicked
     */
    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        gc = null;
        or = null;
        if (runThread != null) {
            if (runThread.isAlive()) {
                runThread.interrupt();
            }
        }
        if (p != null) {
            if (p.isAlive()) {
                p.destroy();
            }
        }

        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed

    /**
     * run the program
     *
     * @param evt
     */
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        // Check run value
        if (paramsSelected) {
            boolean letsRun = false;
            int runs = 0;
            try {
                runs = Integer.parseInt(runsValue.getText());
                if (runs > 0 && runs < 101) {
                    letsRun = true;
                }
            } catch (Exception e) {
                runsValue.setText("");
                letsRun = false;
                statusTF.append("Could not start the runs, because the run value is"
                        + " incorrect. Please use an integer between 1 and 100\n");
            }

            if (letsRun) {

                if (!threadRunning) {
                    // Start a new thread to handle the ECJ process
                    threadRunning = true;
                    statusTF.append("Starting " + runs + " runs...\n");
                    runThread = new Thread(new Runnable() {
                        public void run() {
                            runIt(Integer.parseInt(runsValue.getText()));
                            //runItPB(runs);
                        }
                    });
                    runThread.start();
                }
            }
        } else {
            statusTF.append("\nPlease select a .params file within ECJ to run.\n");
        }

    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * Create median charts
     *
     * @param evt
     */
    private void medianCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianCreateActionPerformed

        double[][] data = or.getAllData(ecjDirectory, fileName, 1);
        if (data != null) {
            gc = new GraphCreator(data.length, 2, "Median Runs", ecjDirectory, fileName);
            gc.addFullRunData(data, 1);
            gc.run();
        }
    }//GEN-LAST:event_medianCreateActionPerformed

    /**
     * create best run charts
     *
     * @param evt
     */
    private void bestRunCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestRunCreateActionPerformed

        double[][] data = or.getAllData(ecjDirectory, fileName, 2);
        if (data != null) {
            gc = new GraphCreator(data.length, 2, "Best of Run Runs", ecjDirectory, fileName);
            gc.addFullRunData(data, 2);
            gc.run();
        }
    }//GEN-LAST:event_bestRunCreateActionPerformed

    /**
     * create best gen charts
     *
     * @param evt
     */
    private void bestGenCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestGenCreateActionPerformed
        // TODO add your handling code here:

        double[][] data = or.getAllData(ecjDirectory, fileName, 3);
        if (data != null) {
            gc = new GraphCreator(data.length, 2, "Best of Generation Runs", ecjDirectory, fileName);
            gc.addFullRunData(data, 3);
            gc.run();
        }
    }//GEN-LAST:event_bestGenCreateActionPerformed

    /**
     * Stop button
     *
     * @param evt
     */
    private void interruptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interruptButtonActionPerformed
        // TODO add your handling code here:
        // interrupt
        try {
            stopped = true;
            runThread.interrupt();
            threadRunning = false;
            p.destroy();

            liveUpdate.setEnabled(true);
            runButton.setEnabled(true);
            interruptButton.setEnabled(false);

            statusTF.append("Run was succesfully stopped!\n");
        } catch (Exception e) {
            //System.out.println("Interrupt problem + " + e.getMessage());
        }
    }//GEN-LAST:event_interruptButtonActionPerformed

    /**
     * bucket median
     *
     * @param evt
     */
    private void bucketMedianCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bucketMedianCreateActionPerformed

        or.writeOut(ecjDirectory, fileName);
        Bucket data = or.getBucketData(ecjDirectory, fileName, 1);
        if (data != null) {
            gc = new GraphCreator(1, 3, "Median Bucket", ecjDirectory, fileName);
            gc.addBarData(data, 1);
            gc.run();
        }
    }//GEN-LAST:event_bucketMedianCreateActionPerformed

    /**
     * bucket best run
     *
     * @param evt
     */
    private void bucketBestRunCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bucketBestRunCreateActionPerformed
        Bucket data = or.getBucketData(ecjDirectory, fileName, 2);
        if (data != null) {
            gc = new GraphCreator(1, 3, "Best Run Bucket", ecjDirectory, fileName);
            gc.addBarData(data, 2);
            gc.run();
        }
    }//GEN-LAST:event_bucketBestRunCreateActionPerformed

    /**
     * bucket best gen
     *
     * @param evt
     */
    private void bucketBestGenCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bucketBestGenCreateActionPerformed
        Bucket data = or.getBucketData(ecjDirectory, fileName, 3);
        if (data != null) {
            gc = new GraphCreator(1, 3, "Best Gen Bucket", ecjDirectory, fileName);
            gc.addBarData(data, 3);
            gc.run();
        }
    }//GEN-LAST:event_bucketBestGenCreateActionPerformed

    /**
     * runIt will run ECJ on the specified params file x number of times
     * creating a new chart which auto updates and adds each run to it
     *
     * @param runNumber
     */
    public void runIt(int runNumber) {

        statusTF.append("Attempting to run " + executeDirectory + " "
                + runNumber + " times...\n");
        // Command to be executed
        String cmd = "java ec.Evolve -file " + executeDirectory;

        boolean live = liveUpdate.isSelected();
        // Buttons so they cant start again and so they can interrupt if they choose
        runButton.setEnabled(false);
        interruptButton.setEnabled(true);
        liveUpdate.setEnabled(false);

        // Create the graph creator        
        gc = new GraphCreator(runNumber, 1, "Live Mean Fitness", ecjDirectory, fileName);

        for (int i = 1; i <= runNumber; i++) {
            try {
                // As long as the user hasnt tried to stop the runs
                if (!stopped) {
                    statusTF.append("Run " + i + " started\n");
                    //System.out.println("Run " + i + " started!");
                    if(live){
                        // Live updater
                        System.out.println("Live logging");        
                        gc.liveFitnessLogging(ecjDirectory, i - 1);
                    }else {
                        System.out.println("Normal logging");                        
                    }
                    p = Runtime.getRuntime().exec(cmd, null, new File(ecjDirectory));

                    p.getOutputStream().close();
                    p.getInputStream().close();
                    p.getErrorStream().close();
                    p.waitFor();

                    //System.out.println("proces complete");
                    //or.setReading(false);
                }

                // As long as the user hasnt tried to stop the runs
                if (!stopped) {

                    or.writeOut(ecjDirectory, fileName);
                    // tell the graphcreator that the current run finished
                    // And give it the entire set of data so it can start the
                    // next run with live updating
                    if(live){
                        gc.runFinished((i - 1), or.getList(1));
                    }else {
                        gc.addCurrentFitnessData(or.getList(1));
                        if(i == 1){
                            gc.run();
                        }
                    }

                    statusTF.append("Run " + i + " completed successfully\n");
                    //System.out.println("Run " + i + " finished!");
                }
            } catch (IOException | InterruptedException ex) {
                if (!stopped) {
                    //System.out.println("FAILED: " + ex.getLocalizedMessage());
                    statusTF.append("Failed. Please check to ensure your parameter file \nis correctly formated,"
                            + "and the java files have compiled correctly\n");
                } else {
                    //System.out.println("Stopped");
                    statusTF.append("Runs have been stopped!\n");
                }
            }
        }

        // Destroy the process
        p.destroy();

        threadRunning = false;
        runButton.setEnabled(true);
        interruptButton.setEnabled(false);
        runThread = null;

        if (!stopped) {
            statusTF.append(runNumber + " runs completed successfully!\n");
            medianCreate.setEnabled(true);
            bestRunCreate.setEnabled(true);
            bestGenCreate.setEnabled(true);
            bucketMedianCreate.setEnabled(true);
            bucketBestRunCreate.setEnabled(true);
            bucketBestGenCreate.setEnabled(true);
            liveUpdate.setEnabled(true);
        }

        stopped = false;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bestGenCreate;
    private javax.swing.JButton bestRunCreate;
    private javax.swing.JButton bucketBestGenCreate;
    private javax.swing.JButton bucketBestRunCreate;
    private javax.swing.JButton bucketMedianCreate;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton interruptButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox liveUpdate;
    private javax.swing.JButton medianCreate;
    private javax.swing.JMenuItem open;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JMenuItem quit;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel runsLabel;
    private javax.swing.JTextField runsValue;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextArea statusTF;
    // End of variables declaration//GEN-END:variables
}
